name: Test Upload para YouTube

on:
  workflow_dispatch:

jobs:
  test_upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install ImageMagick and Fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick fonts-dejavu
          convert -version
        shell: bash

      - name: Adjust ImageMagick Policies for PNG and PNG32
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Adjusting $POLICY_FILE"
            sudo bash -c "echo '<policy domain=\"coder\" rights=\"read|write\" pattern=\"PNG*\" />' >> $POLICY_FILE"
          done
        shell: bash

      - name: Verify ImageMagick Policies
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Verifying $POLICY_FILE"
            grep -E 'PNG*' $POLICY_FILE || echo "No policy found for PNG in $POLICY_FILE"
          done
        shell: bash

      - name: Print ImageMagick Policies
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Content of $POLICY_FILE:"
            cat $POLICY_FILE | grep -E 'PNG*'
            echo ""
          done
        shell: bash

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install moviepy google-api-python-client google-auth-httplib2 google-auth-oauthlib
        shell: bash

      - name: Decode and Create client_secret.json
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" | base64 --decode > client_secret.json
        shell: bash

      - name: Decode and Create token.json
        run: |
          echo "${{ secrets.YOUTUBE_TOKEN_JSON }}" | base64 --decode > token.json
        shell: bash

      - name: Export API Keys to Environment
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_CHANNEL_ID=${{ secrets.YOUTUBE_CHANNEL_ID }}" >> $GITHUB_ENV
        shell: bash

      - name: Create Test Video
        run: |
          python -c "
import os
from moviepy.editor import TextClip, CompositeVideoClip, ColorClip
import logging
import sys

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def criar_video_teste():
    try:
        logging.info('Criando vídeo de teste.')
        fundo = ColorClip(size=(1280, 720), color=(255, 0, 0), duration=5)  # Fundo vermelho de 5 segundos
        texto = TextClip('Vídeo de Teste', fontsize=70, color='white').set_position('center').set_duration(5)
        video = CompositeVideoClip([fundo, texto])
        video_path = 'generated_videos/test_video.mp4'
        os.makedirs(os.path.dirname(video_path), exist_ok=True)
        video.write_videofile(video_path, codec='libx264', audio=False)
        logging.info(f'Vídeo de teste criado em: {video_path}')
    except Exception as e:
        logging.error(f'Erro ao criar vídeo de teste: {e}')
        sys.exit(1)

criar_video_teste()
          "
        shell: bash

      - name: Run Upload Script
        run: |
          python main.py
        shell: bash

      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            main.log
            run_pipeline.log
            criar_video.log
            upload_youtube.log
            upload_tiktok.log
