name: Pipeline de Automação de Vídeos

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'  # Executa todos os dias às 05:00 UTC (~2h da manhã no Brasil)
    - cron: '0 19 * * *' # Executa todos os dias às 19:00 UTC (~16h da tarde no Brasil)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do Código
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Passo 3: Instalar ImageMagick e Fonts DejaVu
      - name: Install ImageMagick and Fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick fonts-dejavu
          convert -version
        shell: bash

      # Passo 4: Ajustar as Políticas de Segurança do ImageMagick para PNG e PNG32
      - name: Adjust ImageMagick Policies for PNG and PNG32
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Ajustando $POLICY_FILE"
            sudo bash -c "echo '<policy domain=\"coder\" rights=\"read|write\" pattern=\"PNG\" />' >> $POLICY_FILE"
            sudo bash -c "echo '<policy domain=\"coder\" rights=\"read|write\" pattern=\"PNG32\" />' >> $POLICY_FILE"
          done
        shell: bash

      # Passo 5: Verificar as Políticas Ajustadas
      - name: Verify ImageMagick Policies
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Verificando $POLICY_FILE"
            grep -E 'PNG|PNG32' $POLICY_FILE || echo "Nenhuma política encontrada para PNG ou PNG32 em $POLICY_FILE"
          done
        shell: bash

      # Passo 6: Listar Versões do MoviePy (usando pip index versions)
      - name: List Available MoviePy Versions
        run: |
          pip install --upgrade pip
          pip index versions moviepy
        shell: bash

      # Passo 7: Instalar Dependências
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt --index-url https://pypi.org/simple
        shell: bash

      # Passo 8: Verificar Instalação das Bibliotecas
      - name: Verify Installations
        run: |
          python -c "import moviepy; print('MoviePy version:', moviepy.__version__)"
          python -c "import google.generativeai as genai; print('Google Gemini Library Imported Successfully')"
          python -c "import yaml; print('PyYAML Imported Successfully')"
          convert -version
        shell: bash

      # Passo 9: Decodificar e Criar client_secret.json
      - name: Decode and Create client_secret.json
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" | base64 --decode > client_secret.json
        shell: bash

      # Passo 10: Decodificar e Criar token.json
      - name: Decode and Create token.json
        run: |
          echo "${{ secrets.YOUTUBE_TOKEN_JSON }}" | base64 --decode > token.json
        shell: bash

      # Passo 11: Exportar GEMINI_API_KEY, YOUTUBE_API_KEY e YOUTUBE_CHANNEL_ID para o Ambiente
      - name: Export API Keys to Environment
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_CHANNEL_ID=${{ secrets.YOUTUBE_CHANNEL_ID }}" >> $GITHUB_ENV
        shell: bash

      # Passo 12: Listar Arquivos para Depuração
      - name: List Files for Debugging
        run: |
          echo "Listando arquivos no diretório raiz:"
          ls -la
          echo "Listando arquivos no diretório 'configs/':"
          ls -la configs/
          echo "Listando arquivos no diretório 'assets/':"
          ls -la assets/
          echo "Listando arquivos no diretório 'data/':"
          ls -la data/
          echo "Listando arquivos no diretório 'audio/':"
          ls -la audio/
          echo "Listando arquivos no diretório 'generated_videos/':"
          ls -la generated_videos/
        shell: bash

      # Passo 13: Executar o Script Principal
      - name: Run Main Pipeline Script
        run: |
          python main.py
        shell: bash

      # Passo 14: Upload de Logs
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            main.log
            run_pipeline.log
            criar_video.log
            upload_youtube.log
            upload_tiktok.log
    ```

#### **Explicações das Modificações:**

1. **Ajuste das Políticas do ImageMagick:**
   - **Passo 4:** Utiliza o comando `find` para localizar todos os arquivos `policy.xml` no sistema. Para cada arquivo encontrado, adiciona as políticas necessárias para `PNG` e `PNG32`.
   - **Passo 5:** Verifica se as políticas foram adicionadas corretamente utilizando `grep`. Se não encontrar as políticas, emite uma mensagem indicando que nenhuma política foi encontrada naquele arquivo específico.

2. **Tratamento de Múltiplos `policy.xml`:**
   - Essa abordagem garante que todas as instâncias do `policy.xml` sejam ajustadas, independentemente do caminho ou da versão do ImageMagick instalada no runner do GitHub Actions.

3. **Separação Clara dos Passos:**
   - Cada passo no workflow está claramente definido, facilitando a identificação de onde o problema pode estar ocorrendo.

### **Passo 2.2: Atualizar o Script Principal com Logging Detalhado**

Certifique-se de que o script `main.py` está importando corretamente todas as bibliotecas necessárias e que está registrando logs detalhados para facilitar a depuração.

#### **Arquivo Completo do Script Principal: `main.py`**
```python
# main.py

import os
import sys
import logging
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaFileUpload
from moviepy.editor import TextClip, CompositeVideoClip, ColorClip

def configurar_logging():
    """
    Configura o sistema de logging para registrar informações no console e em um arquivo.
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('main.log', mode='a', encoding='utf-8')
        ]
    )

def obter_variaveis_ambiente():
    """
    Obtém as variáveis de ambiente necessárias.
    """
    gemini_api_key = os.getenv('GEMINI_API_KEY')
    youtube_api_key = os.getenv('YOUTUBE_API_KEY')
    youtube_channel_id = os.getenv('YOUTUBE_CHANNEL_ID')
    
    variaveis = {
        'gemini_api_key': gemini_api_key,
        'youtube_api_key': youtube_api_key,
        'youtube_channel_id': youtube_channel_id,
    }
    
    return variaveis

def verificar_variaveis(variaveis):
    """
    Verifica se as variáveis de ambiente necessárias estão definidas.
    """
    missing_vars = [chave for chave, valor in variaveis.items() if not valor]
    
    if missing_vars:
        for var in missing_vars:
            logging.error(f"{var} não encontrada.")
        logging.error("Erro na configuração das variáveis de ambiente.")
        sys.exit(1)

def gerar_temas():
    """
    Função para gerar temas. Placeholder para implementação real.
    """
    try:
        logging.info("Iniciando a geração de temas...")
        # Implementar a lógica de geração de temas aqui
        # Exemplo simplificado:
        temas = ["Tecnologia", "Saúde", "Educação"]
        logging.info(f"Temas gerados: {temas}")
        return temas
    except Exception as e:
        logging.error(f"Erro ao gerar temas: {e}")
        sys.exit(1)

def criar_video(tema):
    """
    Função para criar um vídeo com o tema fornecido.
    """
    try:
        logging.info(f"Criando vídeo para o tema: {tema}")
        # Criar um clipe de fundo
        fundo = ColorClip(size=(1280, 720), color=(0, 0, 0), duration=10)  # Fundo preto de 10 segundos

        # Criar um clipe de texto
        texto = TextClip(tema, fontsize=70, color='white').set_position('center').set_duration(10)

        # Combinar os clipes
        video = CompositeVideoClip([fundo, texto])

        # Salvar o vídeo
        video_path = f"generated_videos/{tema.replace(' ', '_')}.mp4"
        os.makedirs(os.path.dirname(video_path), exist_ok=True)
        video.write_videofile(video_path, codec='libx264', audio=False)
        logging.info(f"Vídeo criado em: {video_path}")
        return video_path
    except Exception as e:
        logging.error(f"Erro ao criar vídeo: {e}")
        sys.exit(1)

def upload_youtube(video_path, titulo, descricao, tags, categoria_id, token_path='token.json'):
    """
    Função para fazer upload de vídeo para o YouTube.
    """
    try:
        logging.info("Função upload_youtube iniciada.")
        logging.info(f"Video path: {video_path}")
        logging.info(f"Título: {titulo}")
        logging.info(f"Descrição: {descricao}")
        logging.info(f"Tags: {tags}")
        logging.info(f"Categoria ID: {categoria_id}")
        
        # Carregar as credenciais
        creds = Credentials.from_authorized_user_file(token_path, ['https://www.googleapis.com/auth/youtube.upload'])
        youtube = build('youtube', 'v3', credentials=creds)
        
        # Configurar metadados do vídeo
        body = {
            'snippet': {
                'title': titulo,
                'description': descricao,
                'tags': tags,
                'categoryId': categoria_id
            },
            'status': {
                'privacyStatus': 'public'  # ou 'private', 'unlisted'
            }
        }
        
        # Upload do vídeo
        media = MediaFileUpload(video_path, chunksize=-1, resumable=True)
        request = youtube.videos().insert(
            part=','.join(body.keys()),
            body=body,
            media_body=media
        )
        response = None
        while response is None:
            status, response = request.next_chunk()
            if status:
                logging.info(f"Upload progress: {int(status.progress() * 100)}%")
        
        logging.info(f"Vídeo '{titulo}' carregado com sucesso. ID: {response.get('id')}")
        logging.info("Função upload_youtube concluída.")
        return response.get('id')
    except HttpError as e:
        logging.error(f"HTTP Error durante upload para o YouTube: {e}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Erro ao fazer upload para o YouTube: {e}")
        sys.exit(1)

def upload_tiktok(video_path, titulo, descricao, gemini_api_key):
    """
    Função para fazer upload de vídeo para o TikTok.
    Placeholder para implementação real, pois a API oficial do TikTok para upload pode não estar disponível.
    Pode ser necessário usar Selenium ou outra automação.
    """
    try:
        logging.info("Iniciando upload para o TikTok...")
        # Implementar a lógica de upload para o TikTok aqui
        # Exemplo: Usar Selenium para automatizar o upload ou uma biblioteca específica
        # Este é um placeholder e deve ser adaptado conforme a sua implementação
        logging.info(f"Vídeo '{titulo}' carregado com sucesso no TikTok.")
    except Exception as e:
        logging.error(f"Erro ao fazer upload para o TikTok: {e}")
        sys.exit(1)

def main():
    configurar_logging()
    logging.info("Iniciando pipeline completo...")
    
    variaveis = obter_variaveis_ambiente()
    verificar_variaveis(variaveis)
    
    logging.info("Gerando temas...")
    temas = gerar_temas()
    
    # Selecionar um tema (por exemplo, o primeiro)
    tema = temas[0]
    
    # Criar o vídeo
    video_path = criar_video(tema)
    
    # Definir metadados do vídeo
    titulo = f"Vídeo sobre {tema}"
    descricao = f"Descrição do vídeo sobre {tema}."
    tags = ["exemplo", "automação", "YouTube"]
    categoria_id = "22"  # Categoria de 'People & Blogs', por exemplo
    
    # Fazer upload para o YouTube
    video_id = upload_youtube(video_path, titulo, descricao, tags, categoria_id)
    
    # Fazer upload para o TikTok
    gemini_api_key = variaveis['gemini_api_key']
    upload_tiktok(video_path, titulo, descricao, gemini_api_key)
    
    logging.info("Pipeline concluído com sucesso.")

if __name__ == "__main__":
    main()
