name: Pipeline de Automação de Vídeos

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'  # Executa todos os dias às 05:00 UTC (~2h da manhã no Brasil)
    - cron: '0 19 * * *' # Executa todos os dias às 19:00 UTC (~16h da tarde no Brasil)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do Código
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Passo 3: Remover ImageMagick 6 se instalado
      - name: Remove ImageMagick 6
        run: |
          sudo apt-get remove -y imagemagick
        shell: bash

      # Passo 4: Instalar Dependências para Compilar ImageMagick 7
      - name: Install Build Dependencies for ImageMagick 7
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential checkinstall
          sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev libgif-dev libx11-dev libxml2-dev libfreetype6-dev liblcms2-dev libopenjp2-7-dev libheif-dev libwebp-dev
        shell: bash

      # Passo 5: Baixar e Compilar ImageMagick 7
      - name: Download and Install ImageMagick 7
        run: |
          cd /tmp
          IM_VERSION=7.1.1-41
          wget https://github.com/ImageMagick/ImageMagick/archive/refs/tags/${IM_VERSION}.tar.gz -O ImageMagick-${IM_VERSION}.tar.gz
          tar xvzf ImageMagick-${IM_VERSION}.tar.gz
          cd ImageMagick-${IM_VERSION}
          ./configure --prefix=/usr/local --enable-shared
          make -j$(nproc)
          sudo make install
          sudo ldconfig /usr/local/lib
          magick -version
        shell: bash

      # Passo 5a: Verificar instalação do ImageMagick
      - name: Verify ImageMagick Installation
        run: |
          which magick
          magick -version
        shell: bash

      # Passo 6: Instalar Fontes Necessárias
      - name: Install Necessary Fonts
        run: |
          sudo apt-get install -y fonts-dejavu fonts-freefont-ttf
        shell: bash

      # Passo 7: Listar Fontes Instaladas (Opcional)
      - name: List Installed Fonts
        run: |
          fc-list | grep -i "dejavu\|freefont"
        shell: bash

      # Passo 8: Ajustar as Políticas de Segurança do ImageMagick 7 para PNG e PNG32
      - name: Adjust ImageMagick 7 Policies for PNG and PNG32
        run: |
          POLICY_FILE="/usr/local/etc/ImageMagick-7/policy.xml"
          if [ ! -f "$POLICY_FILE" ]; then
            echo "Arquivo policy.xml não encontrado em $POLICY_FILE."
            exit 1
          fi
          # Fazer backup do arquivo policy.xml
          sudo cp "$POLICY_FILE" "${POLICY_FILE}.bak"
          # Remover políticas restritivas existentes para PNG e PNG32
          sudo sed -i '/<policy domain="coder" rights="none" pattern="PNG" \/>/d' "$POLICY_FILE"
          sudo sed -i '/<policy domain="coder" rights="none" pattern="PNG32" \/>/d' "$POLICY_FILE"
          # Adicionar políticas que permitem leitura e escrita para PNG e PNG32
          echo '<policy domain="coder" rights="read|write" pattern="PNG" />' | sudo tee -a "$POLICY_FILE"
          echo '<policy domain="coder" rights="read|write" pattern="PNG32" />' | sudo tee -a "$POLICY_FILE"
          echo "Políticas ajustadas em $POLICY_FILE."
        shell: bash

      # Passo 9: Verificar as Políticas Ajustadas
      - name: Verify ImageMagick 7 Policies
        run: |
          POLICY_FILE="/usr/local/etc/ImageMagick-7/policy.xml"

          echo "Verificando políticas no arquivo $POLICY_FILE:"
          grep '<policy domain="coder" rights="read|write" pattern="PNG" />' "$POLICY_FILE" && echo "Política para PNG encontrada."
          grep '<policy domain="coder" rights="read|write" pattern="PNG32" />' "$POLICY_FILE" && echo "Política para PNG32 encontrada."
          echo ""
        shell: bash

      # Passo 10: Testar ImageMagick 7 com PNG32
      - name: Test ImageMagick 7 with PNG32
        run: |
          # Criar uma imagem PNG32 de teste
          magick -size 100x100 xc:transparent PNG32:test_png32.png

          # Verificar se a imagem foi criada com sucesso
          if [[ -f "test_png32.png" ]]; then
            echo "PNG32 image created successfully."
          else
            echo "Failed to create PNG32 image."
            exit 1
          fi
        shell: bash

      # Passo 11: Instalar Dependências Python
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      # Passo 12: Decodificar e Criar `client_secret.json` e `token.json`
      - name: Decode Secrets and Create JSON Files
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" | base64 --decode > client_secret.json
          echo "${{ secrets.YOUTUBE_TOKEN_JSON }}" | base64 --decode > token.json
        shell: bash

      # Passo 13: Exportar Variáveis de Ambiente e Configurar MoviePy
      - name: Export Environment Variables and Configure MoviePy
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_CHANNEL_ID=${{ secrets.YOUTUBE_CHANNEL_ID }}" >> $GITHUB_ENV
          echo "TIKTOK_ACCESS_TOKEN=${{ secrets.TIKTOK_ACCESS_TOKEN }}" >> $GITHUB_ENV
          # Configurar MoviePy para usar o ImageMagick 7 via 'magick'
          echo "IMAGEMAGICK_BINARY=/usr/local/bin/magick" >> $GITHUB_ENV
        shell: bash

      # Passo 14: Listar Arquivos para Verificação
      - name: List Files Before Running Script
        run: |
          echo "Arquivos no diretório atual:"
          ls -la
        shell: bash

      # Passo 15: Executar o Script Principal
      - name: Run Main Script
        run: |
          python main.py
        shell: bash

      # Passo 16: Listar Vídeos Gerados
      - name: List Generated Videos
        run: |
          ls -la generated_videos/
        shell: bash

      # Passo 17: Upload dos Vídeos Gerados
      - name: Upload Generated Videos
        uses: actions/upload-artifact@v3
        with:
          name: generated_videos
          path: generated_videos/

      # Passo 18: Upload de Logs (Opcional)
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            main.log
            run_pipeline.log
            criar_video.log
            upload_youtube.log
            upload_tiktok.log

      # Passo 19: Listar Políticas Ativas do ImageMagick 7 (Para Depuração)
      - name: List Active ImageMagick 7 Policies
        run: |
          magick -list policy
        shell: bash
