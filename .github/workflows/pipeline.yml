name: Pipeline de Automação de Vídeos

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'  # Executa todos os dias às 05:00 UTC (~2h da manhã no Brasil)
    - cron: '0 19 * * *' # Executa todos os dias às 19:00 UTC (~16h da tarde no Brasil)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do Código
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Passo 3: Instalar ImageMagick e Fonts DejaVu
      - name: Install ImageMagick and Fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick fonts-dejavu
          convert -version
        shell: bash

      # Passo 4: Ajustar as Políticas de Segurança do ImageMagick para PNG e PNG32
      - name: Adjust ImageMagick Policies for PNG and PNG32
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Adjusting $POLICY_FILE"
            sudo bash -c "echo '<policy domain=\"coder\" rights=\"read|write\" pattern=\"PNG*\" />' >> $POLICY_FILE"
          done
        shell: bash

      # Passo 5: Verificar as Políticas Ajustadas
      - name: Verify ImageMagick Policies
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Verifying $POLICY_FILE"
            grep -E 'PNG*' $POLICY_FILE || echo "No policy found for PNG in $POLICY_FILE"
          done
        shell: bash

      # Passo 6: Listar Versões do MoviePy (usando pip index versions)
      - name: List Available MoviePy Versions
        run: |
          pip install --upgrade pip
          pip index versions moviepy
        shell: bash

      # Passo 7: Instalar Dependências
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt --index-url https://pypi.org/simple
        shell: bash

      # Passo 8: Verificar Instalação das Bibliotecas
      - name: Verify Installations
        run: |
          python -c "import moviepy; print('MoviePy version:', moviepy.__version__)"
          python -c "import google.generativeai as genai; print('Google Gemini Library Imported Successfully')"
          python -c "import yaml; print('PyYAML Imported Successfully')"
          convert -version
        shell: bash

      # Passo 9: Decodificar e Criar client_secret.json
      - name: Decode and Create client_secret.json
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" | base64 --decode > client_secret.json
        shell: bash

      # Passo 10: Decodificar e Criar token.json
      - name: Decode and Create token.json
        run: |
          echo "${{ secrets.YOUTUBE_TOKEN_JSON }}" | base64 --decode > token.json
        shell: bash

      # Passo 11: Exportar GEMINI_API_KEY, YOUTUBE_API_KEY e YOUTUBE_CHANNEL_ID para o Ambiente
      - name: Export API Keys to Environment
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_CHANNEL_ID=${{ secrets.YOUTUBE_CHANNEL_ID }}" >> $GITHUB_ENV
        shell: bash

      # Passo 12: Listar Arquivos para Depuração
      - name: List Files for Debugging
        run: |
          echo "Listing files in root directory:"
          ls -la
          echo "Listing files in 'configs/':"
          ls -la configs/
          echo "Listing files in 'assets/':"
          ls -la assets/
          echo "Listing files in 'data/':"
          ls -la data/
          echo "Listing files in 'audio/':"
          ls -la audio/
          echo "Listing files in 'generated_videos/':"
          ls -la generated_videos/
        shell: bash

      # Passo 13: Executar o Script Principal
      - name: Run Main Pipeline Script
        run: |
          python main.py
        shell: bash

      # Passo 14: Upload de Logs
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            main.log
            run_pipeline.log
            criar_video.log
            upload_youtube.log
            upload_tiktok.log
