name: Pipeline de Automação de Vídeos

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'  # Executa todos os dias às 05:00 UTC (~2h da manhã no Brasil)
    - cron: '0 19 * * *' # Executa todos os dias às 19:00 UTC (~16h da tarde no Brasil)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do Código
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Passo 3: Instalar ImageMagick e Fonts DejaVu
      - name: Install ImageMagick and Fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick fonts-dejavu
          convert -version
        shell: bash

      # Passo 4: Ajustar as Políticas de Segurança do ImageMagick para PNG e PNG32
      - name: Adjust ImageMagick Policies for PNG and PNG32
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Adjusting $POLICY_FILE"
            sudo bash -c 'echo "<policy domain=\"coder\" rights=\"read|write\" pattern=\"PNG\" />" >> '"$POLICY_FILE"
            sudo bash -c 'echo "<policy domain=\"coder\" rights=\"read|write\" pattern=\"PNG32\" />" >> '"$POLICY_FILE"
          done
        shell: bash

      # Passo 5: Verificar as Políticas Ajustadas
      - name: Verify ImageMagick Policies
        run: |
          POLICY_FILES=$(sudo find / -type f -name "policy.xml" 2>/dev/null)
          for POLICY_FILE in $POLICY_FILES; do
            echo "Verifying $POLICY_FILE"
            grep -E 'pattern="PNG"' "$POLICY_FILE" || echo "No policy found for PNG in $POLICY_FILE"
            grep -E 'pattern="PNG32"' "$POLICY_FILE" || echo "No policy found for PNG32 in $POLICY_FILE"
          done
        shell: bash

      # Passo 6: Instalar Dependências Python
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      # Passo 7: Decodificar e Criar `client_secret.json` e `token.json`
      - name: Decode Secrets and Create JSON Files
        run: |
          echo "${{ secrets.CLIENT_SECRET_JSON }}" | base64 --decode > client_secret.json
          echo "${{ secrets.YOUTUBE_TOKEN_JSON }}" | base64 --decode > token.json
        shell: bash

      # Passo 8: Exportar Variáveis de Ambiente
      - name: Export Environment Variables
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_CHANNEL_ID=${{ secrets.YOUTUBE_CHANNEL_ID }}" >> $GITHUB_ENV
        shell: bash

      # Passo 9: Executar o Script Principal
      - name: Run Main Script
        run: |
          python main.py
        shell: bash

      # Passo 10: Upload de Logs (Opcional)
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            main.log
            run_pipeline.log
            criar_video.log
            upload_youtube.log
            upload_tiktok.log
